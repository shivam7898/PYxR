[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"book compare contrast Python R using minimum working examples (MWE).","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"code samples book licensed Creative Commons CC0 1.0 Universal (CC0 1.0), .e. public domain.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"prerequisites","chapter":"Preface","heading":"0.1 Prerequisites","text":" R Python R Python R","code":"\nstrsplit(R.version.string, \" \")[[1]][3]           # R Version\n## [1] \"4.2.1\"print(sys.version.split()[0])                     # Python Version\n## 3.10.5\n# Attached (Basic) Packages in R \nsessionInfo()\n## R version 4.2.1 (2022-06-23 ucrt)\n## Platform: x86_64-w64-mingw32/x64 (64-bit)\n## Running under: Windows 10 x64 (build 19044)\n## \n## Matrix products: default\n## \n## locale:\n## [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8   \n## [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                  \n## [5] LC_TIME=English_India.utf8    \n## \n## attached base packages:\n## [1] stats     graphics  grDevices datasets  utils     methods   base     \n## \n## other attached packages:\n## [1] fontawesome_0.2.2 reticulate_1.25   knitr_1.39        conflicted_1.1.0 \n## \n## loaded via a namespace (and not attached):\n##  [1] Rcpp_1.0.8.3    rstudioapi_0.13 magrittr_2.0.3  xml2_1.3.3     \n##  [5] downlit_0.4.0   lattice_0.20-45 here_1.0.1      R6_2.5.1       \n##  [9] rlang_1.0.2     fastmap_1.1.0   stringr_1.4.0   tools_4.2.1    \n## [13] grid_4.2.1      xfun_0.31       png_0.1-7       cli_3.3.0      \n## [17] jquerylib_0.1.4 htmltools_0.5.2 yaml_2.3.5      digest_0.6.29  \n## [21] rprojroot_2.0.3 bookdown_0.27   Matrix_1.4-1    fs_1.5.2       \n## [25] sass_0.4.1      memoise_2.0.1   cachem_1.0.6    evaluate_0.15  \n## [29] rmarkdown_2.14  stringi_1.7.6   compiler_4.2.1  bslib_0.3.1    \n## [33] jsonlite_1.8.0# Imported (Basic) Modules in Python \nallmodules = [v.__name__ for k, v in globals().items() \n    if type(v) is types.ModuleType and not k.startswith('__')]\n\nlen(allmodules)\n## 8\n\", \".join(allmodules)\n## 'sys, os, pip, copy, types, math, pandas, numpy'\n# Python Configuration with Reticulate\npy_config()\n## python:         C:/Softwares/Python/Python310/python.exe\n## libpython:      C:/Softwares/Python/Python310/python310.dll\n## pythonhome:     C:/Softwares/Python/Python310\n## version:        3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)]\n## Architecture:   64bit\n## numpy:          C:/Softwares/Python/Python310/Lib/site-packages/numpy\n## numpy_version:  1.23.0\n## \n## NOTE: Python version was forced by use_python function"},{"path":"introduction-p01.html","id":"introduction-p01","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"introduction-p01.html","id":"basics","chapter":"1 Introduction","heading":"1.1 Basics","text":"R Python case-sensitiveBoth R Python use Hash sign # comment anything , till newlineBoth R Python keep Backslash \\ reserved escape character follows ","code":""},{"path":"introduction-p01.html","id":"mathematical-operators","chapter":"1 Introduction","heading":"1.2 Mathematical Operators","text":"R Python following operators:\nAddition +, Subtraction -, Multiplication *, Division /\nExponent given caret ^ ** R ** Python\nPython uses caret bitwise XOR\n\nModulus (Remainder) given %% R % Python\nPython uses %% escape percent sign strings\nR use standalone % operator (except special cases like sprintf())\nHowever, R uses %...% syntax define special operators (infix operators) like %*%, %%, etc.\n\nInteger Division (Quotient) given %/% R // Python\nPython use %/% R use //\n\nAddition +, Subtraction -, Multiplication *, Division /Exponent given caret ^ ** R ** Python\nPython uses caret bitwise XOR\nPython uses caret bitwise XORModulus (Remainder) given %% R % Python\nPython uses %% escape percent sign strings\nR use standalone % operator (except special cases like sprintf())\nHowever, R uses %...% syntax define special operators (infix operators) like %*%, %%, etc.\nPython uses %% escape percent sign stringsR use standalone % operator (except special cases like sprintf())However, R uses %...% syntax define special operators (infix operators) like %*%, %%, etc.Integer Division (Quotient) given %/% R // Python\nPython use %/% R use //\nPython use %/% R use // R Python","code":"\n# Exponent\n5 ** 3\n## [1] 125\n5 ^ 3\n## [1] 125\n\n5 %% 3    # Modulus (Remainder)\n## [1] 2\n5 %/% 3   # Integer Division (Quotient)\n## [1] 1# Exponent\n5 ** 3\n## 125\n5 % 3     # Modulus (Remainder)\n## 2\n5 // 3    # Integer Division (Quotient)\n## 1"},{"path":"introduction-p01.html","id":"help","chapter":"1 Introduction","heading":"1.3 Help","text":"R Python help() get details topic\nR also shorthand get help prefixing ? topic\nR also shorthand get help prefixing ? topic R Python","code":"\nif(FALSE) {\n  help(print)\n  ?print\n  ?`+`\n}if(False):\n    help(print)"},{"path":"introduction-p01.html","id":"print","chapter":"1 Introduction","heading":"1.4 Print","text":"Printing largely handled print() R Python\nExplicit Implicit types printing available\nExplicit Implicit types printing available","code":""},{"path":"introduction-p01.html","id":"braces-indentation","chapter":"1 Introduction","heading":"1.5 Braces & Indentation","text":"R uses braces {} group expressions code blocks ignores indentationIndentation white spaces extremely significant Python (unlike R)\n4 Spaces (Tab) used, book, Python chunks\nbackslash \\ allows break one long piece code several parts\ncharacter (including whitespace) backslash cause error\nParentheses () can used enclose code. Parentheses work like backslash, allow extra characters end\nextra newline added Python chunks, book, indicate command /block completed\n4 Spaces (Tab) used, book, Python chunksA backslash \\ allows break one long piece code several partsAny character (including whitespace) backslash cause errorParentheses () can used enclose code. Parentheses work like backslash, allow extra characters endAn extra newline added Python chunks, book, indicate command /block completed","code":""},{"path":"introduction-p01.html","id":"na-nan-00---nan","chapter":"1 Introduction","heading":"1.6 NA NaN 0/0 - nan","text":"0/0 NaN (Number) R undefined Python\nIEEE754 standard defines three special floating-point numbers, Inf, -Inf NaN\nNaN ‘well-defined real number’\nnumerical computing, result can written regular real number, Inf -Inf, expressed NaN.\nIEEE754 standard defines three special floating-point numbers, Inf, -Inf NaNNaN ‘well-defined real number’numerical computing, result can written regular real number, Inf -Inf, expressed NaN.NA NaN\nPython distinguish ‘missing values’ ‘number’. whereas, R clearly distinguish NA NaN\nNaN float value, explicit missing values non-float columns. R, NA can type.\nPython distinguish ‘missing values’ ‘number’. whereas, R clearly distinguish NA NaNNaN float value, explicit missing values non-float columns. R, NA can type.Comparison operation NaN (even )\nPython: == returns False, != returns True (IEEE754 Standard)\nR: operations (==, !=, >= <=, >, <) results NA\nR: NA NaN compared anything NA.\nPython: == returns False, != returns True (IEEE754 Standard)R: operations (==, !=, >= <=, >, <) results NAR: NA NaN compared anything NA.Coercion NaN R (Casting Conversion)\nNaN coercion integer gives NA_integer_\nNaN coercion logical gives NA\nNaN coercion numeric gives NaN\nNaN coercion character gives \"NaN\"\nNaN coercion integer gives NA_integer_NaN coercion logical gives NANaN coercion numeric gives NaNNaN coercion character gives \"NaN\"Reticulate:\npython, missing values also NaN\nnp.nan math.nan Python converted NaN R\nNaN R converted NaN Python\npython, missing values also NaNBoth np.nan math.nan Python converted NaN RNaN R converted NaN PythonPandas\nnp.nan math.nan treated ‘missing values’ class numpy.float64\nNone also treated missing value. numeric columns, None converted nan. columns object type, kept None treated missing value.\nexist pd.NA scalar Pandas, similar R NA. However, experimental currently treated np.nan internally. , used now, book.\nnp.nan math.nan treated ‘missing values’ class numpy.float64None also treated missing value. numeric columns, None converted nan. columns object type, kept None treated missing value.exist pd.NA scalar Pandas, similar R NA. However, experimental currently treated np.nan internally. , used now, book. R Python","code":"\n# 0/0 is defined as NaN in R (unlike Python)\nis.nan(NaN)\n## [1] TRUE\nis.nan(0/0)\n## [1] TRUE\n\n# NaN is treated as NA, however, NA is not treated as NaN\nis.na(NaN)\n## [1] TRUE\nis.nan(NA)\n## [1] FALSE\n\n# NaN is numeric\nstopifnot(is.numeric(NaN))\n\n# Comparison with NaN: All operations are NA, use is.nan() (unlike IEEE, Python)\nstopifnot(all(identical(NaN == NaN, NA),\n              identical(NaN != NaN, NA),\n              identical(NaN <= NaN, NA),\n              identical(NaN >= NaN, NA),\n              identical(NaN <  NaN, NA),\n              identical(NaN >  NaN, NA)))\n\n# Coercion of NaN\nstopifnot(all(identical(as.integer(NaN), NA_integer_),\n              identical(as.logical(NaN), NA),\n              identical(as.character(NaN), \"NaN\"),\n              identical(as.numeric(NaN), NaN)))# 0/0 is undefined in Python (unlike R)\ntry:\n    print(0/0)\nexcept ZeroDivisionError as e:\n    print(e) #e.args type(e)\n\n# There are Two NaN in modules NumPy and Math\n# Use module specific methods but not the 'is' keyword\n## division by zero\npp = float(\"NaN\") # Not case sensitive i.e. NaN, NAN, nan etc. all are valid\nprint(pp)\n## nan\ntype(pp)\n## <class 'float'>\nassert(math.isnan(math.nan) and math.isnan(np.nan) and math.isnan(pp))\nassert(np.isnan(np.nan) and np.isnan(math.nan) and np.isnan(pp))\n\n# 'is' returns True if and only if the two references are to the same object\nnp.nan is math.nan            # False\n\n# Comparison with NaN: == is False, != is True (as per IEEE but unlike R)\n## False\nnp.nan == np.nan\n## False\nmath.nan == math.nan\n \n## False\nnp.nan != np.nan\n## True\nmath.nan != math.nan\n## True"},{"path":"introduction-p01.html","id":"boolean","chapter":"1 Introduction","heading":"1.7 Boolean","text":"R (TRUE, FALSE) vs. Python (True, False) - Case differentPython:\nvalues considered “truthy” except following, “falsy”\nNone, False, 0, 0.0, 0j, Decimal(0), Fraction(0, 1)\nEmpty: list [], dictionary {}, tuple (), string '', range range(0) etc.\nobjects :\nobj.__bool__() returns False\nobj.__len__() returns 0\n\n“truthy” value satisfy check performed statements.\nuse “truthy” “falsy” differentiate bool values True False.\nPython determines truthiness applying bool() type, returns True False used expression like .\nInstances user-defined class considered truthy default.\n\n\nvalues considered “truthy” except following, “falsy”\nNone, False, 0, 0.0, 0j, Decimal(0), Fraction(0, 1)\nEmpty: list [], dictionary {}, tuple (), string '', range range(0) etc.\nobjects :\nobj.__bool__() returns False\nobj.__len__() returns 0\n\n“truthy” value satisfy check performed statements.\nuse “truthy” “falsy” differentiate bool values True False.\nPython determines truthiness applying bool() type, returns True False used expression like .\nInstances user-defined class considered truthy default.\n\nNone, False, 0, 0.0, 0j, Decimal(0), Fraction(0, 1)Empty: list [], dictionary {}, tuple (), string '', range range(0) etc.objects :\nobj.__bool__() returns False\nobj.__len__() returns 0\nobj.__bool__() returns Falseobj.__len__() returns 0A “truthy” value satisfy check performed statements.use “truthy” “falsy” differentiate bool values True False.Python determines truthiness applying bool() type, returns True False used expression like .\nInstances user-defined class considered truthy default.\nInstances user-defined class considered truthy default.","code":""},{"path":"introduction-p01.html","id":"short-circuit","chapter":"1 Introduction","heading":"1.8 Short-circuit","text":"R Python short-circuit evaluation\nHowever, Python, lazy whereas & | \nHowever, Python, lazy whereas & | R Python","code":"\n# Only the First expression is evaluated if it is enough to determine the result\nTRUE | NaN\n## [1] TRUE\nFALSE & NaN\n## [1] FALSE\n\n# Here the Second expression is also evaluated because first is not sufficient\nTRUE & NaN\n## [1] NA\nFALSE | NaN\n## [1] NA\n\n# Logical evaluation returns TRUE, FALSE or NA in R (unlike Python)\n# 0 is FALSE\n3 | NaN\n## [1] TRUE\n0 & NaN\n## [1] FALSE\n0 | NaN\n## [1] NA# Only the First expression is evaluated if it is enough to determine the result\nTrue or np.nan\n## True\nFalse and np.nan\n\n# Here the Second expression is also evaluated because first is not sufficient\n## False\nTrue and np.nan \n## nan\nFalse or np.nan\n\n# Logical evaluation returns the value of final expression evaluated (unlike R)\n## nan\n3 or np.nan\n## 3\nTrue and 3\n## 3"},{"path":"introduction-p01.html","id":"null---none","chapter":"1 Introduction","heading":"1.9 NULL - None","text":"NULL represents null object R: reserved word. NULL often returned expressions functions whose value undefined.\none null object memory\nInside condition, NULL throws error, use .null(x) syntax\noutput expression show numbers brackets like ‘[1]’ NULL type return. [Numbers] show Vector. Ex: str() cat() outputs NULL Type.\none null object memoryInside condition, NULL throws error, use .null(x) syntaxIf output expression show numbers brackets like ‘[1]’ NULL type return. [Numbers] show Vector. Ex: str() cat() outputs NULL Type.Python uses keyword None define null objects variables\nInside condition, None acts False, use x None syntax\nNone singleton. one None memory\nReal Python\nInside condition, None acts False, use x None syntaxNone singleton. one None memoryReal Python R Python","code":"\n# Return of str() is NULL which is passed to print()\nprint(str(\"This returns NULL in R\"))\n##  chr \"This returns NULL in R\"\n## NULL\n\n# Assign NULL\naa <- NULL\n# Type\ntypeof(aa)\n## [1] \"NULL\"\n# Check\nis.null(aa)\n## [1] TRUE\n# is.na() returns logical(0) for NULL\nis.na(aa)\n## logical(0)\n\n# A name pointing to NULL is different from a name which does not exist 'bb'\nexists(\"aa\")\n## [1] TRUE\nexists(\"bb\")\n## [1] FALSE\ntryCatch(expr = print(bb), error = \\(e) print(e))\n## <simpleError in print(bb): object 'bb' not found>\n\n# Usage inside if conditional: NULL throws Error, use is.null()\nif(is.null(aa)) {\n  print(\"Object is NULL\") \n} else {\n  print(\"Object is Not NULL\")\n}\n## [1] \"Object is NULL\"# Return of print() is None which is passed to print()\nprint(print(\"This returns None in Python\"))\n\n# Assign None\n## This returns None in Python\n## None\npp = None\n# Type\ntype(pp)\n# Check\n## <class 'NoneType'>\npp is None\n\n# A name pointing to None is different from a name which does not exist 'qq'\n## True\n'pp' in globals()\n## True\n'qq' in globals()\n## False\ntry:\n    print(qq)\nexcept NameError as e:\n    print(e) #e.args type(e)\n\n#\n# Usage inside if conditional: None is falsy (taken as FALSE), use 'is None' \n## name 'qq' is not defined\nif(pp):\n    print(\"Variable is None\")\nelse:\n    print(\"Variable is Not None\")\n\n#\n## Variable is Not None"},{"path":"introduction-p01.html","id":"indexing","chapter":"1 Introduction","heading":"1.10 Indexing","text":"Indexing starts 1 R. Whereas, starts 0 Python","code":""},{"path":"introduction-p01.html","id":"pipe","chapter":"1 Introduction","heading":"1.11 Pipe","text":"Python uses dot . pipe operatorR uses |> pipe operator along underscore _ placeholder\nminimize issues, book, underscore used (dot avoided) names objects variables names\nminimize issues, book, underscore used (dot avoided) names objects variables names","code":""},{"path":"introduction-p01.html","id":"assignment-operator","chapter":"1 Introduction","heading":"1.12 Assignment Operator","text":"Python uses ‘equal ’ = assignment operatorR uses ‘left arrow’ <- assignment operator\nR, = can used assignment, usage assignment highly discouraged may behave differently certain subtle conditions difficult debug\nConvention use = function calls arguments association (syntactic token)\nR, = can used assignment, usage assignment highly discouraged may behave differently certain subtle conditions difficult debugConvention use = function calls arguments association (syntactic token)","code":""},{"path":"introduction-p01.html","id":"copy-objects-or-variables","chapter":"1 Introduction","heading":"1.13 Copy Objects or Variables","text":"R Advanced R, HadleyR Advanced R, HadleyPython Similar differentPython Similar different R Python","code":"\nif(FALSE) library(\"lobstr\")\n# Create an object containing a value and bind that object to name 'aa'\naa <- 10 \n# Copy an object i.e. Create another binding to an already existing value\nbb <- aa\n# Note that both names are pointing to same memory address\nobj_addr(aa)\n## [1] \"0x1e457e168a0\"\nobj_addr(bb)\n## [1] \"0x1e457e168a0\"\nstopifnot(identical(obj_addr(aa), obj_addr(bb)))\n\n# Print the copy\nprint(bb)\n## [1] 10\n# Modify the copy\nbb <- 5\n# Print the copy and the original (original is unmodified)\nprint(bb)\n## [1] 5\nprint(aa)\n## [1] 10\n# Now the modified name points to a different memory address than earlier\nobj_addr(bb)\n## [1] \"0x1e457e16718\"\n# Original is still pointing to the same address containing original object\nobj_addr(aa)\n## [1] \"0x1e457e168a0\"# Create a variable containing a value and bind that variable to name 'pp'\npp = 10 \n# Copy a variable i.e. Create another binding to an already existing value\nqq = pp\n# Note that both names are pointing to same memory address\nid(pp)\n## 2080045335056\nid(qq)\n## 2080045335056\nassert(id(pp) == id(qq))\n\n# Print the copy\nprint(qq)\n# Modify the copy\n## 10\nqq = 5\n# Print the copy and the original (original is unmodified)\nprint(qq)\n## 5\nprint(pp)\n# Now the modified name points to a different memory address than earlier\n## 10\nid(qq)\n# Original is still pointing to the same address containing original variable\n## 2080045334896\nid(pp)\n## 2080045335056"},{"path":"introduction-p01.html","id":"reticulate-type-conversion","chapter":"1 Introduction","heading":"1.14 Reticulate Type conversion","text":"Refer Table 1.1 conversion rules\nPython variables available R elements py object\nR objects available Python elements r class\nPython variables available R elements py objectR objects available Python elements r classTable 1.1:  (P01T01) Reticulate Type conversion","code":""},{"path":"introduction-p01.html","id":"setup-python-with-reticulate-in-r","chapter":"1 Introduction","heading":"1.15 Setup Python with Reticulate in R","text":" R","code":"\nif(FALSE) {\n  # In R package::reticulate handles Python\n  library(\"reticulate\")\n  \n  # Provide the path to the specific Python binary.\n  use_python(\"C:\\\\Softwares\\\\Python\\\\Python310\\\\python.exe\", required = TRUE)\n  \n  # PATH: C:\\Softwares\\Python\\Python310\\python.exe\n  Sys.which(\"python\")\n}"},{"path":"introduction-p01.html","id":"working-directory","chapter":"1 Introduction","heading":"1.16 Working Directory","text":" R Python","code":"\ngetwd()             # Working Directory\n## [1] \"D:/Analytics/PYxR\"os.getcwd()         # Working Directory\n## 'D:\\\\Analytics\\\\PYxR'"},{"path":"introduction-p01.html","id":"verify-r-python-installation","chapter":"1 Introduction","heading":"1.17 Verify R & Python Installation","text":" RPython (PowerShell Terminal)\ncmd can locate python correctly PowerShell , execute following\n$env:path=\"$env:Path;C:\\Softwares\\Python\\Python310\"\n\npython command leads Microsoft Store\nWindows | Start | Manage app execution aliases | Disable two ‘python.exe’ ‘python3.exe’\nhides access actual exe PATH comes actual\n\nexecutable gives different path depending upon executed\nPython: C:\\\\Softwares\\\\Python\\\\Python310\nLocal RMarkdown: C:\\\\Program Files\\\\RStudio\\\\bin\nKnit: C:\\\\PROGRA~1\\\\R\\\\R-42~1.1\\\\bin\\\\x64\n\ncmd can locate python correctly PowerShell , execute following\n$env:path=\"$env:Path;C:\\Softwares\\Python\\Python310\"\n$env:path=\"$env:Path;C:\\Softwares\\Python\\Python310\"python command leads Microsoft Store\nWindows | Start | Manage app execution aliases | Disable two ‘python.exe’ ‘python3.exe’\nhides access actual exe PATH comes actual\nWindows | Start | Manage app execution aliases | Disable two ‘python.exe’ ‘python3.exe’hides access actual exe PATH comes actualThe executable gives different path depending upon executed\nPython: C:\\\\Softwares\\\\Python\\\\Python310\nLocal RMarkdown: C:\\\\Program Files\\\\RStudio\\\\bin\nKnit: C:\\\\PROGRA~1\\\\R\\\\R-42~1.1\\\\bin\\\\x64\nPython: C:\\\\Softwares\\\\Python\\\\Python310Local RMarkdown: C:\\\\Program Files\\\\RStudio\\\\binKnit: C:\\\\PROGRA~1\\\\R\\\\R-42~1.1\\\\bin\\\\x64","code":"\nstrsplit(R.version.string, \" \")[[1]][3]           # R Version\n## [1] \"4.2.1\"\npackageVersion(\"knitr\")                           # Package Version: knitr\n## [1] '1.39'# Check, in BASH, if the python has been installed \npython --version\n\n# PATH\nwhere.exe python\n\n# Get the pip Version\nbool_as_str=true;\nif [[ \"$bool_as_str\" == \"true\" ]]; then pip --version; fi\n\n## Python 3.10.5\n## C:\\Softwares\\Python\\Python310\\python.exe\n## pip 22.1.2 from C:\\Softwares\\Python\\Python310\\lib\\site-packages\\pip (python 3.10)# Sys Executable Path\nos.path.dirname(sys.executable)\n## 'C:\\\\PROGRA~1\\\\R\\\\R-42~1.1\\\\bin\\\\x64'\nprint(sys.version.split()[0])           # Python Version\n## 3.10.5\nprint(pd.__version__)                   # Module Version: pandas\n## 1.4.2"},{"path":"introduction-p01.html","id":"install-update-of-r-packages-and-python-modules","chapter":"1 Introduction","heading":"1.18 Install & Update of R Packages and Python Modules","text":" RR: Use HMI\nRStudio | Tools | Check Package Updates | Select | Install Updates\nPackages ‘loaded via namespace’ RStudio start-(e.g. knitr), can updated R\n\nR | Packages | Update Packages | Select | OK\nPackages bundled R (e.g. MASS), can updated starting R Administrator Mode.\n\nRStudio | Tools | Check Package Updates | Select | Install Updates\nPackages ‘loaded via namespace’ RStudio start-(e.g. knitr), can updated R\nPackages ‘loaded via namespace’ RStudio start-(e.g. knitr), can updated RR | Packages | Update Packages | Select | OK\nPackages bundled R (e.g. MASS), can updated starting R Administrator Mode.\nPackages bundled R (e.g. MASS), can updated starting R Administrator Mode.Python: Use pip (PowerShell Terminal)\nInstall modules : pip install pandas\nUpgrade pip : python -m pip install --upgrade pip\nUpgrade modules :\nGet List Outdated Modules Freeze Format, split get Module Names, upgrade\npip list --outdated --format=freeze | %{$_.split(\"==\")[0]} #| %{pip install --upgrade $_}\nNote: Upgrade step pipe commented prevent accidents.\n\nFind whether module installed : pip list | grep pandas\nInstall modules : pip install pandasUpgrade pip : python -m pip install --upgrade pipUpgrade modules :\nGet List Outdated Modules Freeze Format, split get Module Names, upgrade\npip list --outdated --format=freeze | %{$_.split(\"==\")[0]} #| %{pip install --upgrade $_}\nNote: Upgrade step pipe commented prevent accidents.\nGet List Outdated Modules Freeze Format, split get Module Names, upgradepip list --outdated --format=freeze | %{$_.split(\"==\")[0]} #| %{pip install --upgrade $_}Note: Upgrade step pipe commented prevent accidents.Find whether module installed : pip list | grep pandas","code":"\nif(FALSE) {\n  # Install R Packages  \n  install.packages(\"knitr\", dependencies = TRUE)\n  \n  # Find whether a package is installed or not (slow)\n  installed.packages() |> rownames() |> is.element(el = \"knitr\", set = _)\n}"},{"path":"introduction-p01.html","id":"attach-an-r-package-load-a-python-module","chapter":"1 Introduction","heading":"1.19 Attach an R Package & Load a Python Module","text":" R Python","code":"\nif(FALSE) {\n  # Attach an R Package\n  library(knitr)\n  \n  # Attach multiple R Packages\n  c(\"reticulate\", \"knitr\") |> lapply(library, character.only=TRUE)\n  \n  # List all attached Packages\n  print(.packages())\n}if(False):\n    # Load a Python Module\n    import sys\n    import pandas as pd\n    import numpy as np\n    \n    # Load multiple Python Modules\n    import sys, pandas as pd, numpy as np\n    \n    # List all imported Modules\n    # Works except the implicit import: 'from x import y' (avoid this)\n    # Use k to list alias or use v.__name__ to list actual module names\n    allmodules = [v.__name__ for k, v in globals().items() \n        if type(v) is types.ModuleType and not k.startswith('__')]\n    \n    len(allmodules)\n    \n    \", \".join(allmodules)"},{"path":"introduction-p01.html","id":"r-sessioninfo","chapter":"1 Introduction","heading":"1.20 R sessionInfo()","text":"R sessionInfo() provides quick look OS, locale, packages loadedPython similar -built method. However,\npip list can used along globals()\nModule session_info attempts provide similar output\npip list can used along globals()Module session_info attempts provide similar output R","code":"\nif(FALSE) {\n  # List of all attached packages and OS related information\n  sessionInfo()\n  \n  # Base Packages\n  aa <- c(\"stats\",\"graphics\",\"grDevices\",\"datasets\",\"utils\",\"methods\",\"base\")\n  stopifnot(identical(setdiff(sessionInfo()$basePkgs, aa), character(0)))\n  \n  # other attached packages\n  names(sessionInfo()$otherPkgs)\n  \n  # loaded via a namespace (and not attached)\n  names(sessionInfo()$loadedOnly)\n}"},{"path":"introduction-p01.html","id":"verify","chapter":"1 Introduction","heading":"1.21 Verify","text":" R","code":"\nls()\n## [1] \"aa\" \"bb\" \"r\""},{"path":"structures-p02.html","id":"structures-p02","chapter":"2 Data Structures","heading":"2 Data Structures","text":"","code":""},{"path":"structures-p02.html","id":"r-atomic-vectors-or-data-types","chapter":"2 Data Structures","heading":"2.1 R Atomic Vectors or Data Types","text":"R 6 basic data types (logical, integer, double, character, complex, raw). data types can combined form Data Structures (vector, list, matrix, dataframe, factor).\nVectors simplest type data structure R. vector sequence data elements basic type.\nMembers vector called ‘components’.\nAtomic vectors homogeneous .e. component datatype.\nvector type can checked typeof() function.\nlist vector ‘atomic vector’.\nVectors simplest type data structure R. vector sequence data elements basic type.Members vector called ‘components’.Atomic vectors homogeneous .e. component datatype.vector type can checked typeof() function.list vector ‘atomic vector’.Create vector list c()\nR, literal character number just vector length 1.\n, c() ‘combines’ together series 1-length vectors. neither ‘creates’ ‘concatenates’ vectors. combines lists list vectors vector.\nattributes (e.g. dim) except names removed.\narguments coerced common type\noutput type determined highest type components hierarchy NULL < raw < logical < integer < double < complex < character < list < expression.\nR, literal character number just vector length 1., c() ‘combines’ together series 1-length vectors. neither ‘creates’ ‘concatenates’ vectors. combines lists list vectors vector.attributes (e.g. dim) except names removed.arguments coerced common typeThe output type determined highest type components hierarchy NULL < raw < logical < integer < double < complex < character < list < expression. R","code":"\n# Integer: To declare as integer \"L\" (not \"l\") is added as Suffix\nstr(c(1L, 2L, NA, 4L, 5L))\n##  int [1:5] 1 2 NA 4 5\n\n# Double (& Default)\nstr(c(1, 2, NA, 4, 5))\n##  num [1:5] 1 2 NA 4 5\n\n# Character\nstr(c('a', 'b', NA, 'd', 'e'))\n##  chr [1:5] \"a\" \"b\" NA \"d\" \"e\"\n\n# Logical\nstr(c(TRUE, FALSE, NA, FALSE, TRUE))\n##  logi [1:5] TRUE FALSE NA FALSE TRUE"},{"path":"structures-p02.html","id":"examination-of-r-data-types","chapter":"2 Data Structures","heading":"2.2 Examination of R Data Types","text":" R","code":"\n# To know about an Object Named Vector (pi, letters are predefined)\naa <- setNames(c(1, 2, NA, pi, 4), nm = letters[1:5])\n\ntypeof(aa)              # Type\n## [1] \"double\"\nclass(aa)               # Class\n## [1] \"numeric\"\nstr(aa)                 # Structure\n##  Named num [1:5] 1 2 NA 3.14 4\n##  - attr(*, \"names\")= chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\nlength(aa)              # Length\n## [1] 5\ndim(aa)                 # Dimensions\n## NULL\nis(aa)                  # Inheritance\n## [1] \"numeric\"      \"vector\"       \"index\"        \"replValue\"    \"numLike\"     \n## [6] \"number\"       \"atomicVector\" \"replValueSp\"\nnames(attributes(aa))   # Attributes\n## [1] \"names\"\nnames(aa)               # Names\n## [1] \"a\" \"b\" \"c\" \"d\" \"e\""},{"path":"structures-p02.html","id":"r-matrices-and-arrays","chapter":"2 Data Structures","heading":"2.3 R Matrices and Arrays","text":"Matrices arrays simply vectors attribute dim attached vector.\ndata elements must basic type.\nmatrix two-dimensional rectangular data set.\nArrays multi-dimensional Data structures. Data stored form matrices, row, well columns.\ndata elements must basic type.matrix two-dimensional rectangular data set.Arrays multi-dimensional Data structures. Data stored form matrices, row, well columns. R","code":"\n# Create Matrix\naa <- matrix(1:6, nrow=3, ncol=2, byrow=TRUE, dimnames=list(NULL, c(\"x\", \"y\")))\nbb <- matrix(1:6, nrow=3, ncol=2, byrow=FALSE, dimnames=list(NULL, c(\"x\", \"y\")))\n\nprint(aa)\n##      x y\n## [1,] 1 2\n## [2,] 3 4\n## [3,] 5 6\nprint(bb)\n##      x y\n## [1,] 1 4\n## [2,] 2 5\n## [3,] 3 6\n\n# About\nstr(aa)\n##  int [1:3, 1:2] 1 3 5 2 4 6\n##  - attr(*, \"dimnames\")=List of 2\n##   ..$ : NULL\n##   ..$ : chr [1:2] \"x\" \"y\"\ndim(aa)\n## [1] 3 2\nlength(aa)\n## [1] 6\n\n# Matrices have 'dimnames' attribute instead of usual 'names'\nnames(attributes(aa))\n## [1] \"dim\"      \"dimnames\"\nnames(aa)\n## NULL\ndimnames(aa) \n## [[1]]\n## NULL\n## \n## [[2]]\n## [1] \"x\" \"y\""},{"path":"structures-p02.html","id":"r-lists","chapter":"2 Data Structures","heading":"2.4 R Lists","text":"Lists ‘elements’, can contain type R object, .e. elements list type.\nlist vector ‘atomic vector’.\nlist vector ‘atomic vector’. R","code":"\n# Create List (letters is predefined vector of 26 elements)\naa <- list(x = 4:6, y = letters[4:8])\nprint(aa)\n## $x\n## [1] 4 5 6\n## \n## $y\n## [1] \"d\" \"e\" \"f\" \"g\" \"h\"\n\n# About\nstr(aa)\n## List of 2\n##  $ x: int [1:3] 4 5 6\n##  $ y: chr [1:5] \"d\" \"e\" \"f\" \"g\" ...\nlength(aa)              # Number of elements in the List\n## [1] 2\nlengths(aa)             # Number of components of each element of the List\n## x y \n## 3 5\nstopifnot(identical(lengths(aa), sapply(aa, length)))\n\nnames(attributes(aa))   # Attributes\n## [1] \"names\"\nnames(aa)               # Names of elements\n## [1] \"x\" \"y\""},{"path":"structures-p02.html","id":"r-dataframes","chapter":"2 Data Structures","heading":"2.5 R DataFrames","text":"Data frame list vectors, factors, /matrices length (number rows case matrices).\ndata frame can contain list length components.\ndata frame can contain list length components. R","code":"\n# Create DataFrame (letters is predefined vector of 26 elements)\naa <- data.frame(x = 4:6, y = letters[4:6])\nprint(aa)\n##   x y\n## 1 4 d\n## 2 5 e\n## 3 6 f\n\n# About\nstr(aa)\n## 'data.frame':    3 obs. of  2 variables:\n##  $ x: int  4 5 6\n##  $ y: chr  \"d\" \"e\" \"f\"\ndim(aa)                 #Dimensions Row x Column\n## [1] 3 2\nstopifnot(all(identical(nrow(aa), dim(aa)[1]),\n              identical(ncol(aa), dim(aa)[2])))\n\nnames(attributes(aa))   # Attributes\n## [1] \"names\"     \"class\"     \"row.names\"\nnames(aa)               # Names of column headers\n## [1] \"x\" \"y\"\n\nis.list(aa)\n## [1] TRUE\nis.vector(aa)\n## [1] FALSE\nis.atomic(aa)\n## [1] FALSE"},{"path":"structures-p02.html","id":"r-factors","chapter":"2 Data Structures","heading":"2.6 R Factors","text":"Factors used describe items can finite number values (gender, social class, etc.). factor levels attribute class factor.\nfactor may purely nominal may ordered categories.\nfactor may purely nominal may ordered categories. R","code":"\n# Create Factors Unordered\naa <- factor(c(\"female\", \"male\", \"male\", \"female\", \"male\"), ordered = FALSE)\n# Create Factors Ordered\nbb <- factor(c(\"female\", \"male\", \"male\", \"female\", \"male\"), ordered = TRUE)\n\nprint(aa)\n## [1] female male   male   female male  \n## Levels: female male\nprint(bb)\n## [1] female male   male   female male  \n## Levels: female < male\n\n# About\nstr(aa)\n##  Factor w/ 2 levels \"female\",\"male\": 1 2 2 1 2\nstr(bb)\n##  Ord.factor w/ 2 levels \"female\"<\"male\": 1 2 2 1 2\n\nnlevels(aa)             # Count of Levels\n## [1] 2\nlevels(aa)              # Vector of Levels\n## [1] \"female\" \"male\"\nnames(attributes(aa))   # Attributes\n## [1] \"levels\" \"class\""},{"path":"structures-p02.html","id":"membership-functions","chapter":"2 Data Structures","heading":"2.7 Membership Functions","text":"anyNA() TRUE NA present, FALSE otherwiseis.atomic() TRUE atomic vectors, factors, matrices FALSE lists dataframesis.vector() TRUE atomic vectors, lists FALSE factors, matrices, DATE & POSIXct\nreturns FALSE vector attributes (except names) ex: DATE, POSIXct, DataFrames (even though Dataframe list list vector)\nreturns FALSE vector attributes (except names) ex: DATE, POSIXct, DataFrames (even though Dataframe list list vector).numeric() TRUE integer doubleis.integer(), .double(), .character(), .logical() TRUE respective datatypes onlyis.factor(), .ordered() membership functions factors without ordering R","code":"\n# Create Objects\naa_num <- setNames(c(1, 2, NA, pi, 4), nm = letters[1:5])\nbb_mat <- matrix(1:6, nrow=3, ncol=2, byrow=TRUE)\ndd_dft <- data.frame(x = 4:6, y = letters[4:6])\nee_lst <- list(x = 4:6, y = letters[4:8])\nff_fct <- factor(c(\"female\", \"male\", \"male\", \"female\", \"male\"), ordered = FALSE)\n\n# List of Objects\ngg <- list(Vector = aa_num, Matrix = bb_mat, DataFrame = dd_dft, \n            List = ee_lst, Factor = ff_fct)\n\n# Apply a membership function on all of the objects inside the list\nnames(which(sapply(gg, is.atomic)))\n## [1] \"Vector\" \"Matrix\" \"Factor\"\nnames(which(sapply(gg, is.vector)))\n## [1] \"Vector\" \"List\"\nnames(which(sapply(gg, is.matrix)))\n## [1] \"Matrix\"\nnames(which(sapply(gg, is.list)))\n## [1] \"DataFrame\" \"List\"\nnames(which(sapply(gg, is.data.frame)))\n## [1] \"DataFrame\"\nnames(which(sapply(gg, is.factor)))\n## [1] \"Factor\""}]
