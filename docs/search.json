[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"book compare contrast Python R using minimum working examples (MWE).","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"code samples book licensed Creative Commons CC0 1.0 Universal (CC0 1.0), .e. public domain.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"prerequisites","chapter":"Preface","heading":"0.1 Prerequisites","text":"","code":"\nR.version.string\n## [1] \"R version 4.2.0 (2022-04-22 ucrt)\"print(sys.version)\n## 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)]\n# Attached (Basic) Packages in R \nsessionInfo()\n## R version 4.2.0 (2022-04-22 ucrt)\n## Platform: x86_64-w64-mingw32/x64 (64-bit)\n## Running under: Windows 10 x64 (build 19044)\n## \n## Matrix products: default\n## \n## locale:\n## [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8   \n## [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                  \n## [5] LC_TIME=English_India.utf8    \n## \n## attached base packages:\n## [1] stats     graphics  grDevices datasets  utils     methods   base     \n## \n## other attached packages:\n## [1] reticulate_1.25  knitr_1.39       conflicted_1.1.0\n## \n## loaded via a namespace (and not attached):\n##  [1] Rcpp_1.0.8.3    rstudioapi_0.13 magrittr_2.0.3  xml2_1.3.3     \n##  [5] downlit_0.4.0   lattice_0.20-45 here_1.0.1      R6_2.5.1       \n##  [9] rlang_1.0.2     fastmap_1.1.0   stringr_1.4.0   tools_4.2.0    \n## [13] grid_4.2.0      xfun_0.31       png_0.1-7       cli_3.3.0      \n## [17] jquerylib_0.1.4 htmltools_0.5.2 yaml_2.3.5      rprojroot_2.0.3\n## [21] digest_0.6.29   bookdown_0.27   Matrix_1.4-1    fs_1.5.2       \n## [25] sass_0.4.1      memoise_2.0.1   cachem_1.0.6    evaluate_0.15  \n## [29] rmarkdown_2.14  stringi_1.7.6   compiler_4.2.0  bslib_0.3.1    \n## [33] jsonlite_1.8.0# Imported (Basic) Modules in Python \nallmodules = [v.__name__ for k, v in globals().items() \n    if type(v) is types.ModuleType and not k.startswith('__')]\n\nlen(allmodules)\n## 7\n\", \".join(allmodules)\n## 'sys, os, pip, copy, types, pandas, numpy'\n# Python Configuration with Reticulate\npy_config()\n## python:         C:/Softwares/Python/Python310/python.exe\n## libpython:      C:/Softwares/Python/Python310/python310.dll\n## pythonhome:     C:/Softwares/Python/Python310\n## version:        3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)]\n## Architecture:   64bit\n## numpy:          C:/Softwares/Python/Python310/Lib/site-packages/numpy\n## numpy_version:  1.22.4\n## \n## NOTE: Python version was forced by use_python function"},{"path":"introduction-p01.html","id":"introduction-p01","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"introduction-p01.html","id":"similarity-between-r-and-python","chapter":"1 Introduction","heading":"1.1 Similarity between R and Python","text":"R Python case-sensitiveBoth R Python use Hash Sign “#” comment anything , till newlineBoth R Python keep Backslash “\\” reserved escape character follows ","code":""},{"path":"introduction-p01.html","id":"differences-between-r-and-python","chapter":"1 Introduction","heading":"1.2 Differences between R and Python","text":"","code":""},{"path":"introduction-p01.html","id":"indentation","chapter":"1 Introduction","heading":"1.2.1 Indentation","text":"Indentation white spaces extremely significant Python (unlike R)\n4 Spaces (Tab) used, book, Python chunks\nbackslash “\\” allows break one long piece code several parts\ncharacter (including whitespace) backslash cause error\nParentheses “()” can used enclose code. Parentheses work like backslash, allow extra characters end\nextra newline added Python chunks, book, indicate command /block completed\n4 Spaces (Tab) used, book, Python chunksA backslash “\\” allows break one long piece code several partsAny character (including whitespace) backslash cause errorParentheses “()” can used enclose code. Parentheses work like backslash, allow extra characters endAn extra newline added Python chunks, book, indicate command /block completed","code":""},{"path":"introduction-p01.html","id":"boolean","chapter":"1 Introduction","heading":"1.2.2 Boolean","text":"R (TRUE, FALSE) vs. Python (True, False) - Case different","code":""},{"path":"introduction-p01.html","id":"null-none","chapter":"1 Introduction","heading":"1.2.3 NULL & None","text":"NULL represents null object R: reserved word. NULL often returned expressions functions whose value undefined.\none null object memory\nInside condition, NULL throws error, use ‘.null(x)’ syntax\none null object memoryInside condition, NULL throws error, use ‘.null(x)’ syntaxPython uses keyword None define null objects variables\nInside condition, None acts False, use ‘x None’ syntax\nNone singleton. one None memory\nReal Python\nInside condition, None acts False, use ‘x None’ syntaxNone singleton. one None memoryReal Python","code":"\n# Return of str() is NULL which is passed to print()\nprint(str(\"This returns NULL in R\"))\n##  chr \"This returns NULL in R\"\n## NULL\n\n# Assign NULL\naa <- NULL\n# Type\ntypeof(aa)\n## [1] \"NULL\"\n# Check\nis.null(aa)\n## [1] TRUE\n\n# A name pointing to NULL is different from a name which does not exist 'bb'\nexists(\"aa\")\n## [1] TRUE\nexists(\"bb\")\n## [1] FALSE\ntryCatch(expr = print(bb), error = \\(e) print(e))\n## <simpleError in print(bb): object 'bb' not found>\n\n# Usage inside if conditional: NULL throws Error, use is.null()\nif(is.null(aa)) {\n  print(\"IF Block\") \n} else {\n  print(\"ELSE Block\")\n}\n## [1] \"IF Block\"# Return of print() is None which is passed to print()\nprint(print(\"This returns None in Python\"))\n\n# Assign None\n## This returns None in Python\n## None\npp = None\n# Type\ntype(pp)\n# Check\n## <class 'NoneType'>\npp is None\n\n# A name pointing to None is different from a name which does not exist 'qq'\n## True\n'pp' in globals()\n## True\n'qq' in globals()\n## False\ntry:\n    print(qq)\nexcept NameError as e:\n    print(e) #e.args type(e)\n\n#\n# Usage inside if conditional: None is falsy (taken as FALSE), use 'is None' \n## name 'qq' is not defined\nif(pp):\n    print(\"IF Block\")\nelse:\n    print(\"ELSE Block\")\n\n#\n## ELSE Block"},{"path":"introduction-p01.html","id":"indexing","chapter":"1 Introduction","heading":"1.2.4 Indexing","text":"Indexing starts 1 R. Whereas, starts 0 Python","code":""},{"path":"introduction-p01.html","id":"pipe","chapter":"1 Introduction","heading":"1.2.5 Pipe","text":"Python uses dot “.” pipe operatorR uses “|>” pipe operator along underscore “_” placeholder\nminimize issues, book, underscore used (dot avoided) names objects variables names\nminimize issues, book, underscore used (dot avoided) names objects variables names","code":""},{"path":"introduction-p01.html","id":"assignment-operator","chapter":"1 Introduction","heading":"1.2.6 Assignment Operator","text":"Python uses ‘equal ’ ” = ” assignment operatorR uses equal ” <- ” assignment operator\nR, ” = ” can used assignment, usage assignment highly discouraged may behave differently certain subtle conditions difficult debug\nConvention use ” = ” function calls arguments association (syntactic token)\nR, ” = ” can used assignment, usage assignment highly discouraged may behave differently certain subtle conditions difficult debugConvention use ” = ” function calls arguments association (syntactic token)","code":""},{"path":"introduction-p01.html","id":"copy-objects-or-variables","chapter":"1 Introduction","heading":"1.2.7 Copy Objects or Variables","text":"R Advanced R, HadleyR Advanced R, HadleyPython Similar differentPython Similar different","code":"\n# Load Packages: \"lobstr\"\n# Create an object containing a value and bind that object to name 'aa'\naa <- 10 \n# Copy an object i.e. Create another binding to an already existing value\nbb <- aa\n# Note that both names are pointing to same memory address\nobj_addr(aa)\n## [1] \"0x1fbb1638a48\"\nobj_addr(bb)\n## [1] \"0x1fbb1638a48\"\nstopifnot(identical(obj_addr(aa), obj_addr(bb)))\n\n# Print the copy\nprint(bb)\n## [1] 10\n# Modify the copy\nbb <- 5\n# Print the copy and the original (original is unmodified)\nprint(bb)\n## [1] 5\nprint(aa)\n## [1] 10\n# Now the modified name points to a different memory address than earlier\nobj_addr(bb)\n## [1] \"0x1fbb1638888\"\n# Original is still pointing to the same address containing original object\nobj_addr(aa)\n## [1] \"0x1fbb1638a48\"# Create a variable containing a value and bind that variable to name 'pp'\npp = 10 \n# Copy a variable i.e. Create another binding to an already existing value\nqq = pp\n# Note that both names are pointing to same memory address\nid(pp)\n## 2180568121872\nid(qq)\n## 2180568121872\nassert(id(pp) == id(qq))\n\n# Print the copy\nprint(qq)\n# Modify the copy\n## 10\nqq = 5\n# Print the copy and the original (original is unmodified)\nprint(qq)\n## 5\nprint(pp)\n# Now the modified name points to a different memory address than earlier\n## 10\nid(qq)\n# Original is still pointing to the same address containing original variable\n## 2180568121712\nid(pp)\n## 2180568121872"},{"path":"introduction-p01.html","id":"reticulate-type-conversion","chapter":"1 Introduction","heading":"1.2.8 Reticulate Type conversion","text":"R : PythonSingle element vector : ScalarMulti element vector : ListList multiple types : TupleNamed List : DictionaryMatrix /Array : NumPy ndarrayData Frame : Pandas Data FrameFunction: FunctionRaw : Byte array","code":""},{"path":"introduction-p01.html","id":"verify","chapter":"1 Introduction","heading":"1.3 Verify","text":"","code":"\nR.version.string\n## [1] \"R version 4.2.0 (2022-04-22 ucrt)\"print(sys.version)\n## 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)]\nls()\n## [1] \"aa\" \"bb\" \"r\""}]
